<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[目标检测综述2019年---优化改进方向]]></title>
    <url>%2F2019%2F09%2F17%2F%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%BB%BC%E8%BF%B02019%E5%B9%B4-%E4%BC%98%E5%8C%96%E6%94%B9%E8%BF%9B%E6%96%B9%E5%90%91%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>目标检测</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[目标检测论文归纳]]></title>
    <url>%2F2019%2F09%2F17%2F%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E5%BD%92%E7%BA%B3%2F</url>
    <content type="text"><![CDATA[关于无人贩卖机的理解SSD算法及其在铁路场景异常目标检测中的应用研究研究过程手机了铁路场景和普通场景下柏寒待检测类别的目标图像，结合迁移学习的思想，对SSD网络采取不同的方法进行了多次训练。对小尺度的目标检测效果不佳，改进性推出了多块SSD算法， 基于深度学习的视觉目标检测与识别关键技术及应用摘要论文工作 基于动态空间约束的图像目标检测算法，解决多检测问题，同时使用两个平行的分类网络来解决严重的类别不平衡 提升一阶段的目标检测运行速度，同时不能以牺牲目标检测器的准确率为代价 提出自调整局部特征融合算法，解决视频上遇到问题，解决退化帧问题，模糊散焦 基于特征融合的视频多人姿势估计方法 自顶向下，通过目标检测网络获得每个人的候选框，再用单人姿态估计网络预测每个人的关键点 自底向上，直接预测所有人的关键点的位置和类别，然后根据树模型或者图模型把这些关键点组合每个人的姿态。 卷积网络历史由于以前的数据集规模较小，卷积网路并未广泛使用。随着大规模高分辨率数据集的发布和计算机能力的提升，深度卷积神经网络开始主导计算机视觉的各个研究领域。IMageNet分类数据集包含120万张高分辨图像，总共包含1000个不同类别的物体。ALexNet使用5个卷积层和3个全连接层，获得2012年的ImageNet分类比赛冠军，他的误差率为15.3%。VGG整个网络只使用3×3卷积层，没有用大感受野的卷积层。因为两个3×3的卷积层就具有5×5的感受野。一是降低了模型参数，加快运行速度。另一方面由于使用更多的非线性函数，增加了网络的表达能力。并且vgg使用5个最大池化层，把所有卷积层分成5个阶段，每个阶段卷积层比前一个阶段的卷积层包含更多的通道数。后来多遵循这些设计准则，只改变每个阶段的自网络结构。batch normalization解决了模型的收敛问题之后，通过堆叠更多的卷积层应该能盖塞模型的性能。然而，实验结果表明，模型深度的增加反而导致泛化能力降低。残差网络结构ResNet，使用跨层连接把前面卷积层的输出直接传递到后面的卷积层。与使用几个堆叠的卷积层来表示所需的潜在映射相比，使用残差映射更容易优化。ResNeXt结合了ResNet和Xception的优点，设计了一个多分支的残差网络结构，每个分支具有相同的拓扑结果。 图像的目标检测主要分为二阶段和一阶段目标检测器以R-CNN及其变体为代表的二阶段目标检测网络。二阶段方法把目标检测任务分为两个子任务：第一阶段，生成预测框，该阶段主要负责感兴趣的目标物体检测。第二阶段，使用区域自网络负责候选框的分类和回归。对于一张图片来说，第二阶段区域自网络需要执行几百次，导致二阶段目标检测器运行缓慢。R-FCN使用位置敏感得分图实现了区域自网络的计算共享。1网络共享的意思，就像第一部分的基础网络VGG，只需要进行一次向前运算就可以得到所有rois。但是第二部分的子网络，却不是所有ROIS共享，需要对每个roi进行分类和回归，所以不能进行共享计算。 与二阶段相比，一阶段目标检测网络直接预测感兴趣目标物体的边界框和类别。yolo使用定制的网络结构和强空间约束。与yolo相比，SSD使用特征金字塔来预测不同大小的物体。对于计算能力和内存均受限的移动设备来说，我们需要更高效的网络结构。ShuffleNet和MobileNet专为移动设备设计的高效网络。 视频目标检测相对于静止图像相比，视频中可能出现遇到物体外观退化，比如模糊、散焦、遮挡和罕见外观。量化实验表明,由于连续的视频帧中包含同一物体的大量信息，当前的视频目标检测算法以图像目标检测网络为基础，利用视频中的时间信息来降低退化帧的影响，也可以利用视频中冗余信息来提升模型的速度。 DFF 认为视频中相邻帧的特征包含大量的相同信息，DFF只使用特征提取网络提取关键帧的特征，然后用光流算法把关键帧的特征的特征映射传播到非关键帧。 FGFA 提取每一帧图像的特征，还融合了多帧空间对齐后的相邻帧的特点。 ##### 基于动态空间约束的图像目标检测算法 SSD的速度限制于多检测问题上。现在多检测问题已经成为1阶段目标检测器速度提升的主要障碍。人们已经提出了许多方法来解决多检测问题。 - 只保留每个特征金字塔层前1000个候选预测边界框。 - 使用一个专用的自网络来预测每个默认边界框是否包含物体，以此来降低搜索空间。 - 使用强空间约束来解决多检测问题 疑问，为什么用动态空间约束过滤掉绝大多数冗余的正默认边框，剩下的是高置信得分和低重叠度。 经过动态空间约束后，正样本个数减少，加剧了类别不平衡。难例挖掘或者焦点损失函数来缓解类别不平衡。使用连个平行的分类器来解决类别不平衡问题。一个是专门负责背景的，一个负责正默认框的。 yoloyolo使用强空间约束来解决多检测问题。yolo将整个输入图像划分为S×S的网格，每个网格单元生成多个默认边界框。只有真实边界框的中心点坐标位于该网格单元，才把真实边界框与该网格单元具有最高交叉联合iou重叠度的默认边界框匹配。 结果pascal voc2007数据集上实验结果对比 300*300的图片，准确率超过ssd，增幅为0.8%mAP 基于深度学习的视频目标检测算法研究与应用背景传统的视频监控系统仅仅包括对视频数据的捕获、保存、传输和显示，人工实现对视频内容的分析识别。智能监控系统为视频西西的自动分析与处理提供了重要思路。传统的目标跟踪主要分了两种思路。一种是利用搜索选择法进行候选框区域选取来最小化重构误差。另一种则通过训练二分类器进行目标与背景分离进行判别。 基于深度学习的目标跟踪方法研究现状与展望 研究工作在已有的物体识别、目标检测和目标跟踪技术基础上，进一步对视频中物体的目标检测和行为跟踪问题深入研究，实现统一的深度框架下监控范围内运动目标检测与轨迹跟踪，研究其中深度网络结构的改进思想，提高模型结构的准确度和使用性能。具体表现 采用深度网络结构中的卷积操作对视频、图像进行特征提取 在此基础上融合区域建议算法实现对出现的所有目标对象进行边界标定 最后结合目标跟踪技术得到时间序列上运动目标完整的运动轨迹。 研究现状不同于对静态图像的目标检测问题，视频中的目标检测往往面对着更多的处理难题： 视频数据集中含有更多的帧图像文件，由于快速照相或物体运动引起的运动模糊、光照问题 网络视频剪辑拥有比静态相片质量更差的画质，以及物体 基于深度学习的目标追踪 L.wang等人随后提出了利用不同卷积层来进行特征图选择实现定位目标位置的跟踪思路 H Nam等人基于共享卷积的基础上，对多个运动目标增加新的分类层进行继续微调，并提出Multi-Domain CNN网络结构前者解决了训练数据有限的问题，使用迁移学习的思路极大地减少了对跟踪目标训练样本的需求。后者则在解决思路上充分利用了深度特征强大的表征能力。 Visual tracking with fully convolutional networks[C]learing multi-domain convolutional neural networks for visual tracking[J] 相关参数数据库：IMageNet Large Scale Visual Recognition Challenge(ILSVRC)性能指标：定量的分析与验证算法实现的有效性 精确度评价指标 IoU是判别两个边框之间重叠率高低的重要依据 结合IoU计算，定义TP(true positive)为被正确地划分为正例的个数，FP(false positive)为被错误划分为正例的个数，同样定义TN、FN。 精确率，在所有判别为正例中，正确识别为正例的比例。 precision=TP/(TP+FP) 召回率，在所有正例样本中，正确预测为正例的比例。recall=TP/(TP+FN)]]></content>
      <categories>
        <category>目标检测</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python中对象和类]]></title>
    <url>%2F2019%2F09%2F14%2Fpython%E4%B8%AD%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[python类 定义类 类是对一群具有相同特征或者行为的事物的 一个统称。是抽象的，不能直接使用。 123456789类的主要作用是表示某些特征和行为，在python中特征被称为属性行为被称为方法class 类名：def 方法1(self, 参数列表) passdef 方法2(self, 参数列表) pass 类属性 12class human(object): taisheng = True 为什么要叫类属性呢，因为这个属性和类绑定的，并不是和实例绑定。例如胎生是所有人类共有的属性。 实例属性 1234class Human(object)： def __init__(self,name): self.name = namehuman_a = Human(&quot;alan&quot;) 我们首先实例化一个人类human_a，然后对这个人类设置一个实例属性name，name这个属性独立于其他的人类，是和实例绑定的。 - 一般放在构造函数里__init()__ 类方法 1234567class Human(object): def __init__(self,name): self.name = name def walk(self): print(self.name + &quot;is walking&quot;)human_a = Human(&quot;alan&quot;) # 类的实例化,对类实例化的结果就是产生一个该类的对象，实例化是action，对象是valuehuman_a.walk() # 通过对象访问类的sayhi方法 类的方法可以看作是一种类属性，而传入的第一个参数self，表示调用这个类方法的实例。 #### 访问控制 从上面的例子来看，我们可以在外部随意更改name这个属性，如果不想让外部直接访问到，则在属性这个名字前家两个下划线__name，这样从外部就无法直接访问了。如果还想访问，可以再加个get的接口 1234567891011class Human(object): def __init__(self,name): self.__name = name def walk(self): print(self.name + &quot;is walking&quot;) def get_name(self): return self.__name def set_name(self,name): self.__name = namehuman_a = Human(&quot;alan&quot;) print(human_a.get_name()) 疑问：为什么要画蛇添足，增加复杂性 这样做的好处在于增加代码的健壮性，直接暴漏属性可能会带来意想不到的后果，通过接口的方式可以加以控制，例如，我们可以通过set接口去限定name的长度。 继承 最开始的简介里说到，哺乳动物是动物的一种，用面向对象的属于来说，哺乳动物是动物的子类，子类拥有父类的属性、方法、即继承，同时又可以拥有父类没有的属性和方法，即多态。 1234class Man(human): def __init__(self,name,has_wife): self.__name = name self.__has_wife = has_wife 这个男人多了一个属性，__has_wife。我们写到了Man的构造函数里。其实通常并不这么写构造函数，假如Human里有很多属性、很多初始化步骤，我们通常会这么写 1234class Man(human): def __init__(self,name,has_wife): # 先继承，在重构 super(Man,self).__init__(name) #继承父类的构造方法 self.__has_wife = has_wife super(Man,self).__init__(name)等价于调用父类Human的构造函数]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>对象和类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3中sys.stdin用法]]></title>
    <url>%2F2019%2F09%2F11%2Fpython3%E4%B8%ADsys-stdin%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[sys.stdin.readline() sys.stdin.readline()的作用和input相似。 单个输入 123import sysinput = sys.stdin.readline() 输入转换成int类型 12import sysinput = int(sys.stdin.readline) 多个输入 如果是在多行中实现多次输入，可以使用while实现 1234567import systry: while True: n = int(sys.stdin.readline()) print(n)except: pass 如果是在一行中进行多个输入 12import sysn = sys.stdin.readline().strip(&apos;\n&apos;) 如果说我们需要去掉结尾的，我们可以这样写： （注意：strip只能用于移除字符串头尾指定的字符序列） 输入列表 123456789import sysn = sys.stdin.readline()n = list(map(int,n.split()))#以空格、\n、\t 为分隔符``` map是根据提供的函数对制定序列做映射，第一个参数是function，第二个参数是数据，将数据以function的形式传给n## input()关于input( )和sys.stdin.readline( )的区别,sys.stdin.readline( )会将标准输入全部获取，包括末尾的&apos;\n&apos;，input()会把‘\n’忽略. import sys a=sys.stdin.readline() b=input() print(len(a),len(b)) 执行： abc abc 4 3 ```]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>sys.stdin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo插入数学公式]]></title>
    <url>%2F2019%2F09%2F09%2Fhexo%E6%8F%92%E5%85%A5%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[原生hexo并不支持数学公式，需要安装插件 mathJax。mathJax 是一款运行于浏览器中的开源数学符号渲染引擎，使用 mathJax 可以方便的在浏览器中嵌入数学公式。mathJax 使用网络字体产生高质量的排版，因此可适应各种分辨率，它的显示是基于文本的而非图片，因此显示效果更好。这些公式可以被搜索引擎使用，因此公式里的符号一样可以被搜索引擎检索到。 安装与配置 1$ npm install hexo-math --save 在站点配置文件 _config.yml 中添加： 123456math: engine: &apos;mathjax&apos; # or &apos;katex&apos; mathjax: # src: custom_mathjax_source config: # MathJax config 在 next 主题配置文件中 themes/next-theme/_config.yml 中将 mathJax 设为 true: 12345# MathJax Supportmathjax: enable: true per_page: false cdn: //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML 使用 公式插入格式： 12$数学公式$ 行内 不独占一行$$数学公式$$ 行间 独占一行 语法格式 上标与下标 使用 ^ 表示上标，使用 _ 表示下标，如果上下标的内容多于一个字符，可以使用大括号括起来： 1$$f(x) = a_1x^n + a_2x^&#123;n-1&#125; + a_3x^&#123;n-2&#125;$$ \[f(x) = a_1x^n + a_2x^{n-1} + a_3x^{n-2}\] 括号 在 markdown 语法中，, $, {, }, _都是有特殊含义的，所以需要加。小括号与方括号可以使用原始的() [] 大括号需要转义 12\&#123;x*y\&#125;\lbrace x*y \rbrace 显示效果为{x*y} 原始符号不会随着公式大小自动缩放，需要使用 和 来实现自动缩放： 1$$\left \lbrace \sum_&#123;i=0&#125;^n i^3 = \frac&#123;(n^2+n)(n+6)&#125;&#123;9&#125; \right \rbrace$$ 效果：\[\left \lbrace \sum_{i=0}^n i^3 = \frac{(n^2+n)(n+6)}{9} \right \rbrace\] 分数与开方 可以使用或者 实现分数的显示： 12$\frac xy$$ x+3 \over y+5 $ 分别显示为：\(\frac xy\)、\(x+3 \over y+5\) 开方使用: 12$\sqrt&#123;x^5&#125;$$\sqrt[3]&#123;\frac xy&#125;$ 分别显示为：\(\sqrt{x^5}\) \(\sqrt[3]{\frac xy}\) 求和与积分 和使用,可加上下标，积分使用，双重积分用: 123$\sum_&#123;i=0&#125;^n$$\int_1^\infty$$\iint_1^\infty$ 分别显示:\(\sum_{i=0}^n\) \(\int_1^\infty\) \(\iint_1^\infty\) 表格与矩阵 表格样式lcr表示居中，|加入一条竖线，，列之间用&amp;分隔，行之间用 1234567$$\begin&#123;array&#125;&#123;c|lcr&#125;n &amp; \text&#123;Left&#125; &amp; \text&#123;Center&#125; &amp; \text&#123;Right&#125; \\\\\hline1 &amp; 1.97 &amp; 5 &amp; 12 \\\\2 &amp; -11 &amp; 19 &amp; -80 \\\\3 &amp; 70 &amp; 209 &amp; 1+i \\\\\end&#123;array&#125;$$ 显示效果为：\[\begin{array}{c|lcr} n &amp; \text{Left} &amp; \text{Center} &amp; \text{Right} \\\\ \hline 1 &amp; 1.97 &amp; 5 &amp; 12 \\\\ 2 &amp; -11 &amp; 19 &amp; -80 \\\\ 3 &amp; 70 &amp; 209 &amp; 1+i \\\\ \end{array}\] 矩阵显示和表格很相似 123456789101112131415161718192021$$\left[\begin&#123;matrix&#125;V_A \\\\V_B \\\\V_C \\\\\end&#123;matrix&#125;\right] =\left[\begin&#123;matrix&#125;1 &amp; 0 &amp; L \\\\-cosψ &amp; sinψ &amp; L \\\\-cosψ &amp; -sinψ &amp; L\end&#123;matrix&#125;\right]\left[\begin&#123;matrix&#125;V_x \\\\V_y \\\\W \\\\\end&#123;matrix&#125;\right] $$ 显示效果：\[\left[ \begin{matrix} V_A \\\\ V_B \\\\ V_C \\\\ \end{matrix} \right] = \left[ \begin{matrix} 1 &amp; 0 &amp; L \\\\ -cosψ &amp; sinψ &amp; L \\\\ -cosψ &amp; -sinψ &amp; L \end{matrix} \right] \left[ \begin{matrix} V_x \\\\ V_y \\\\ W \\\\ \end{matrix} \right] \]]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo操作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[yolo的原理和实现]]></title>
    <url>%2F2019%2F09%2F09%2Fyolo%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[SSD原理与实现]]></title>
    <url>%2F2019%2F09%2F08%2FSSD%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[前言 目标检测 目标检测近年来已经取得了很重要的进展，主流的算法主要分为两个类型： 1. two-stage方法，如R-CNN系算法，其主要思路是先通过启发式方法（selective search）或者CNN网络（RPN)产生一系列稀疏的候选框，然后对这些候选框进行分类与回归，two-stage方法的优势是准确度高； 2. one-stage方法，如Yolo和SSD，其主要思路是均匀地在图片的不同位置进行密集抽样，抽样时可以采用不同尺度和长宽比，然后利用CNN提取特征后直接进行分类与回归，整个过程只需要一步，所以其优势是速度快，但是均匀的密集采样的一个重要缺点是训练比较困难，这主要是因为正样本与负样本（背景）极其不均衡（参见Focal Loss），导致模型准确度稍低。 ## 设计理念 #### 贡献 - 相比Yolo，SSD采用CNN来直接进行检测，而不是像Yolo那样在全连接层之后做检测。 - SSD提取了不同尺度的特征图来做检测，大尺度特征图（较靠前的特征图）可以用来检测小物体，而小尺度特征图（较靠后的特征图）用来检测大物体 - SSD采用了不同尺度和长宽比的先验框（Prior boxes, Default boxes，在Faster R-CNN中叫做锚，Anchors） 相比yolo 与Yolo最后采用全连接层不同，SSD直接采用卷积对不同的特征图来进行提取检测结果。对于形状为的\(m×n×p\)特征图，只需要采用\(3×3×p\)这样比较小的卷积核得到检测值。 在Yolo中，每个单元预测多个边界框，但是其都是相对这个单元本身（正方块），但是真实目标的形状是多变的，Yolo需要在训练过程中自适应目标的形状。 而SSD借鉴了Faster R-CNN中anchor的理念，每个单元设置尺度或者长宽比不同的先验框，预测的边界框（bounding boxes）是以这些先验框为基准的，在一定程度上减少训练难度。 SSD的检测值也与Yolo不太一样。对于每个单元的每个先验框，其都输出一套独立的检测值，对应一个边界框，主要分为两个部分 第一部分是各个类别的置信度或者评分 第二部分就是边界框的location，包含4个值，分别表示边界框的中心坐标以及宽高。但是真实预测值其实只是边界框相对于先验框的转换值。 网络结构 SSD采用VGG16作为基础模型，然后再VGG16的基础上增加了卷积层来获得更多的特征图用于检测。 - VGG16是在ILSVRC CLS-LOC 数据集与训练 将VGG16的全连接层fc6和fc7转换成\(3×3\)的卷积层conv6和\(1×1\)的卷积层conv7，同时将池化层pool5 stride=2的\(2×2\) 变成stride=1的\(3×3\) 采用了一种Atrous Algorithm，在conv6采用采用\(3×3\)大小但dilation rate=6的扩展卷积 VGG16的conv4_3将作为用于检测的第一个特征图，conv4_3特征大小\(38×38\)，但是需要添加L2 Normalization层，以保证和后面的检测层差异不是很大。与batch normalization层不太一样，其仅仅是对没个像素点在channel维度做归一化，而batch normalization层在[batch_size, width, height]三个维度上做归一化。+]]></content>
      <categories>
        <category>目标检测与识别</category>
      </categories>
      <tags>
        <tag>目标检测</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R-FCN学习及理解]]></title>
    <url>%2F2019%2F09%2F08%2FR-FCN%E5%AD%A6%E4%B9%A0%E5%8F%8A%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[1.贡献 提出Position-sensitive score maps来解决目标检测的位置敏感性问题 区域为基础，全卷积网络的two-state目标检测框架 比faster-rcnn快2.5-20倍 2.R-FCN与传统two-state网络的异同点 Faster R-rcnn是首个利用CNN来完成proposals的预测 - Fully Convolution subnetwork before RoI layer - RoI-wise subnetwork 1.第一部分直接用普通分类的卷积层，用来提取共享特征，然后一个ROI pooling layer在第一部分的最后一张特征图上进行提取针对各个Rois的特征向量，然后将所有Rois的特征向量，交由第二部分来处理（分类和回归）。 2.第二部分一部都是全连接层，在最后有2个并行的loss函数：softmax和smoothL1，分别用来对每一个Roi进行回归和分类。这样就可以的得到每个ROi的真实类别和较为精确的坐标和长宽了。 注意：rois是共享所有由基础分类网络生成的feature maps，而第二部分的Roi-wise subnetwork，它却不是所有Rois共享的，因为这一部分的就是给每个ROi进行分类和回归，所以不能共享计算。 首先问题就在于，第一部分的网络具有“位置不敏感性”--平移的不变性。 我的疑惑，translation-invariance代表什么，是指卷积网络是具有位置信息，但是全连接层是没有位置信息的？ resnet论文解决方法：roi pooling layer不再放在卷积层和全连接之间，而是放在卷积层之间，样RoI Pooling Layer之前和之后都有卷积层，并且RoI Pooling Layer之后的卷积层不是共享计算的，它们是针对每个RoI进行特征提取的，所以这种网络设计，其RoI Pooling Layer之后就具有了“位置敏感性translation-variance” 缺点：测试速度很慢。 3.RFC网络设计 设计思路：如果一个Roi含有一个类别c的物体，那么作者就将该ROi分类k*k个区域，分别表示该物体的各个部位 例子: 假设Roi中含有人这个物体，k=3，那么将&quot;人&quot; 划分为9个子区域，而将Roi划分为k^2个区域是希望这个Roi在其中的每一个区域都应该含有该类别c的物体的各个部位。当所有子区域都含有各自对应的该物体相应部位后，那么分类器才会判断为该类别。物体的各个部位和roi的子区域是映射关系。 我的疑惑：如何判断该子区域为该类别呢？ 4.position-sensitive score map position-sensitive score map设计的核心思想：判断RoI子区域是否含有物体的相应部位” R-FCN会在共享卷积层的最后再接上一层卷积层，而该卷积层就是“位置敏感得分图position-sensitive score map” score maps的意义：它就是一层卷积层，它的height和width和共享卷积层的一样，但是它的channels= k^2(C+1),那么C表示物体类别种数再加上1个背景类别，每个类别都有 k^2个score maps。每个score maps表示原图image中的哪些位置含有人的某一个部位，而每一个score map表示该score map对应的人体的某个部位有&quot;高响应值&quot;，也就是说每一个score map都是用来“描述人体的其中一个部位出现在该score map的何 处，而在出现的地方就有高响应值”。 #### 5.Position-sensitive RoI pooling pooling layer的作用：就是在该bin对应的score map上的子区域执行，且执行的是平均池化。第i个bin对应的第i个score map上找响应值，那么也就是在第i个score map上的“该第i个bin对应的位置”上进行池化操作，且池化是取“bin这个范围内的所有值的平均值”。对于每个类别，它都有k^2个score maps，那么对于每个类别，该类别的k2个值都表示该RoI属于该类别的响应值，那么将这k2个数相加就得到该类别的score，那么一共有C+1个scores，那么将这C+1个数使用简单的softmax函数就可以得到属于各个类别的概率了 6.position-sensitive regression 在ResNet的共享卷积层的最后一层上，接上一个与position-sensitive score map并行的（sibling）score maps，该score maps用于regression，暂且命名为“regression score map”，而该regression score map的维度应当是4k^2 ,那么在经过Position-sensitive RoI pooling操作后，每一个RoI就会得到第4个数作为“该RoI的坐标和长宽的偏移量”了。 7.网络的训练 根据网络的loss公式，如果一个RoI含有人这个物体，那么该RoI通过“position-sensitive score map”+“Position-sensitive RoI pooling”得到的 [公式] 个值中的属于人的那个值必然会在softmax损失函数的要求下“变得尽量的大”，那么如何才能使得属于人的这个值尽量的大呢？那么我们现在就要想到，属于人的这个预测值是怎么来的？在前面的分析，我们已经知道它是通过Position-sensitive RoI pooling这种池化操作的来的，那么也就是说使得 [公式] 个值中属于人的那个值尽量大，必然会使得position-sensitive score map中属于人的那个score map上的“该RoI对应的位置区域的平均值”尽量大，从而也就是该score map上在该区域上的响应值尽量大，因为只有该区域的响应值大了，才能使得预测为人的概率大，才会降低softmax的loss。 使用如上的损失函数，对于任意一个RoI，计算它的softmax损失，和“当其不属于背景时的回归损失”。这很简单，因为每个RoI都被指定属于某一个GT box或者属于背景，即先让GT box选择与其IoU最大的那个RoI，然后再对剩余RoI选择与GT box的IoU&gt;0.5的进行匹配，而剩下的RoI全部为背景类别。那么RoI有了label后，loss自然很容易计算出来。 而唯一不同的就是，为了减少计算量，作者将所有RoIs的loss值都计算出来后，对其进行排序，并只对“最大的128个损失值对应的RoIs”执行反向传播操作，其它的则忽略。并且训练策略也是采用的Faster R-CNN中的4-step alternating training进行训练。 在测试的时候，为了减少RoIs的数量，作者在RPN提取阶段就将RPN提取的大约2W个proposals进行过滤： 去除超过图像边界的proposals 使用基于类别概率且阈值IoU=0.7的NMS过滤 按照类别概率选择top-N个proposals 所以在测试的时候，一般只剩下300个RoIs，当然这个数量是一个超参数。并且在R-FCN的输出300个预测框之后，仍然要对其使用NMS去除冗余的预测框。 其他 trous 技巧 作者将最后1个池化层的步长从2减小到1，那么图像将从缩小32倍变成只缩小16倍，这样就提高了共享卷积层的输出分辨率。而这样做就要使用Atrous Convolution算法，具体参见论文Semantic Image Segmentation With Deep Convolutional Nets and Fully Connnected CRFS 输入Image的RoI是如何映射到position-sensitive score map上的？ 因为RoI的坐标应该相对于原始image的真实坐标，而Position-sensitive RoI pooling的池化操作却是利用RoI在position-sensitive score map上完成的，那么现在就必须有一个映射关系将输入image上的RoI映射到position-sensitive score map上，大致映射见下图（详情可参见原始图片中的ROI如何映射到到feature map?） RFCN算法步骤 首先，我们选择一张需要处理的图片，并对这张图片进行相应的预处理。 接着，我们将预处理后的图片送入一个预训练好的分类网络中。 接着，在预训练网络的最后一个卷积层获得的feature maps上存在3个分支，第一个分支就是在该feature map上面进行RPN进行获得相应的ROI；第二个分支就是在该feature map获得了一个k*k*(c+1)维的位置敏感得分映射，用来进行分类。第三个分支就是在该feature map上获得一个4*k*k维的位置敏感得分映射，用来进行回归。 最后，在kk(c+1)维的位置敏感得分映射和4*k*k维的位置敏感得分上面分别执行位置敏感的roi的池化操作，就是平均池化操作，获得对应的类别和位置信息。]]></content>
      <categories>
        <category>目标检测与识别</category>
      </categories>
      <tags>
        <tag>全卷积</tag>
        <tag>目标检测</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FCN的学习及理解]]></title>
    <url>%2F2019%2F09%2F08%2FFCN%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%8F%8A%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>目标检测与识别</category>
      </categories>
      <tags>
        <tag>语义分割</tag>
        <tag>全卷积</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[入坑java开发的自学之路]]></title>
    <url>%2F2019%2F09%2F05%2F%E5%85%A5%E5%9D%91java%E5%BC%80%E5%8F%91%E7%9A%84%E8%87%AA%E5%AD%A6%E4%B9%8B%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[基础知识 编程语言：java、python、c 基本算法 基本网络知识：TCP/IP HTTP/HTTPS 基本设计模式 --- ## 工具方面 操作系统：linux （centos/ubuntu） 代码管理：git 持续集成：jenkins java的项目管理工具：Maven / Gradle ## 框架方面 #### 应用层框架 - ssh spring + structs + hibernate - ssm：spring springmvc mybatis - spring boot #### 各种中间件 - MQ 消息队列 - RPC 通信框架 - elasticsearch 数据库 搜索引擎 #### 数据库 - SQL: MySQL / postgre SQL - NoSQL： Redis Menmcached mongodb 架构方面 分布式/微服务架构 spring cloud dubbo rpc通信 虚拟化/容器化的技术 docker 容器化 K8S kubernetes 关于源码/性能 JDK源码以及部分设计思想 spring源码 jvm 细节与排错 高并发/高可用 书籍 java编程思想 java 并发编程实战 深入理解java虚拟机 函数式变成思维 tcp/ip详解 卷1 鸟哥linux私房菜]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next主题设置]]></title>
    <url>%2F2019%2F09%2F05%2FNext%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[搜索功能 安装插件 npm install hexo-generator-searchdb --save 修改 站点配置 文件 12345search: path: search.xml field: post format: html limit: 10000 修改 主题配置文件 12local_search: enable: true]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Next主题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo操作]]></title>
    <url>%2F2019%2F09%2F05%2Fhexo%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[hexo操作 hexo help # 查看帮助 hexo version #查看Hexo的版本 hexo algolia # 更新search庫 hexo new &quot;postName&quot; #新建文章 hexo new post &quot;title&quot; # 生成新文章：_posts\title.md，可省略post hexo new page &quot;pageName&quot; #新建页面 hexo clean #清除部署緩存 hexo n == hexo new #新建文章 hexo g == hexo generate #生成静态页面至public目录 hexo s == hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server） hexo d == hexo deploy #将.deploy目录部署到GitHub hexo d -g #生成加部署 hexo s -g #生成加预览 ## 部署 每次部署的步骤，可按以下两部来进行 hexo cl hexo d -g 添加分类 创建分类选项 打开命令行，进入博客所在文件夹。执行命令 1hexo new page categories 成功后会提示： 1INFO Created: ~/Documents/blog/source/categories/index.md 根据上面的路径，找到index.md这个文件，添加type: &quot;categories&quot;到内容中，添加后是这样的： 123title: 文章分类date: 2017-05-27 13:47:40type: &quot;categories&quot; 给文章添加“categories”属性 打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。 123456---title: jQuery对表单的操作及更多应用date: 2017-05-26 12:12:57categories:- web前端--- 至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。 标签 生成“标签”页并添加tpye属性 打开命令行，进入博客所在文件夹。执行命令 1hexo new page tags 根据上面的路径，找到index.md这个文件，添加type: &quot;tags&quot;到内容中，添加后是这样的： 12345---title: 文章分类date: 2017-05-27 13:47:40type: &quot;tags&quot;--- 给文章添加“tags”属性 打开需要添加标签的文章，为其添加tags属性。 123456789---title: jQuery对表单的操作及更多应用date: 2017-05-26 12:12:57categories:- web前端tags:- jQuery- 表格---]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown基本语法和操作]]></title>
    <url>%2F2019%2F09%2F05%2Fmarkdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%92%8C%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[markdown基本语法和操作 一、基本语法 1.1 字体大小、颜色、类型、加粗、倾斜、删除 123456&lt;font size=5&gt; Hello&lt;br&gt;&lt;font color=red&gt;color&lt;br&gt;&lt;font face=&quot;微软雅黑&quot;&gt;微软雅黑&lt;br&gt;**内容** 加粗&lt;br&gt;*内容* 倾斜&lt;br&gt;~~内容~~ 1.2 标题 通过在文字前面添加#即可 123# 一级标题## 二级标题### 三级标题 1.3 超链接 12[超链接名](超链接地址)[baidu](http://baidu.com) 1.4 插入图片 12[图片描述](图片链接)![avatar](http://baidu.com/pic/doge.png) 1.5、代码块 12int a = 0system.out.println(&quot;Hello&quot;); 1.6 引用 在被引用的文本前加上&gt;符号，以及一个空格就可以了，如果只输入了一个&gt;符号会产生一个空白的引用。 ### 1.7分割线 123三个或者三个以上 - 或者 ****--- 1.8 列表 无序列表 12- 使用 *，+，- 表示无序列表。- 注意：符号后面一定要有一个空格，起到缩进的作用。 有序列表 12使用数字和一个英文句点表示有序列表。注意：英文句点后面一定要有一个空格，起到缩进的作用。 注意事项 1在使用列表时，只要是数字后面加上英文的点，就会无意间产生列表，比如2017.12.30 这时候想表达的是日期，有些软件把它被误认为是列表。解决方式：在每个点前面加上\就可以了。 1.9 表格 12345学号|姓名|分数-|-|-小明|男|75注意：表格对齐方式：我们可以指定表格单元格的对齐方式，冒号在左边表示左对齐，右边表示有对齐，两边都有表示居中。 学号 姓名 分数 小明 男 75 二、常用技巧 2.1 换行 1html语言换行标签：&lt;br&gt; 2.2 缩进字符 你好 你好 你好 你好 123&amp;#160;你好 缩进1/4 中文&amp;#8194;你好 缩进半个中文，1个字符&amp;#8195;你好 缩进一个中文，2个字符 特殊符号 对于 Markdown 中的语法符号，前面加反斜线。 如何让博文列表不显示全部内容 默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？ 答案是在合适的位置加上即可 三、latex数学公式]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+github配置]]></title>
    <url>%2F2019%2F09%2F04%2Fhexo-github%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[hexo部署github博客 一、简介 Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。Hexo能够快速生成博客和部署博客，使创建博客更加简单。 二、安装步骤 1.搭建环境准备：node.js和git环境，gitHub账户的配置 2.安装Hexo 3.配置Hexo 4.怎么将Hexo与github page联系 5.怎么发布文章 6.主题 推荐 7.主题Net的简单配置 8.添加sitemap和feed插件 9.添加404公益页面 搭建环境准备 Node.js 的安装和准备 git 的安装和准备 github账户的配置 配置Node.js 环境 下载Node.js 安装文件 安装完后，打开cmd，在打开的命令行界面中，输入 12Node -vnpm -v 配置Git环境 安装git 同样，打开命令行界面检查是否安装正确，输入： 1git --version gitHub账户的配置 已有，跳过 创建代码库，在repository name下填写 yourname.github.io 注意：比如我的github名称是gdutxiaoxu ,这里你就填 gdutxiaoxu.github.io,如果你的名字是xujun，那你就填 xujun.github.io --- ### hexo安装 在自己认为合适的地方创建一个文件夹，这里我以E：/hexo 为例子讲解，首先在E盘目录下创建Hexo文件夹，并在命令行的窗口进入到该目录 在命令行输入： 1npm install hexo-cli -g 然后继续输入： 1npm install hexo --save hexo的相关配置 初始化hexo,继续上述操作： 12hexo initnpm install hexo生成和部署 12hexo g 生成hexo s 打开blog ### hexo与github page 联系起来 大致分为一下几步： - 配置git个人信息 - 配置deployment ### 配置git个人信息 1. 设置Git的user name和email：(如果是第一次的话)： 12git config --global user.name &quot;chanchanchanhhh&quot;git config --global user.email &quot;dzumin@hotmail.com&quot; 2. 生成密钥 1ssh-keygen -t rsa -C &quot;gdutxiaoxu@163.com&quot; 3. 打开github setting, 选择ssh密钥，添加密钥，并打开id_rsa文件将密钥复制并粘贴在描述栏。 ### 配置Deployment 1234deploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master 4. 安装一个扩展 1npm install hexo-deployer-git --save Net主题的配置 在 Hexo 中有两份主要的配置文件，其名称都是_config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。 1.安装Next Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。 - 在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码 12cd your-hexo-sitegit clone https://github.com/iissnan/hexo-theme-next themes/next 2.启用主题 - 与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。 1theme: next]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
